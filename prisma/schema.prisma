// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider = "zod-prisma"
  output   = "../src/schema/zod/zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

model User {
  id             String    @id @unique @default(uuid())
  firstName      String
  lastName       String?
  email          String    @unique
  password       String
  profilePicture String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  isAdmin        Boolean   @default(false)
  Vehicle        Vehicle[]
}

model Vehicle {
  id            String            @unique @default(uuid())
  vehicleNumber String            @unique
  gpsDeviceId   String            @unique
  user          User              @relation(fields: [userId], references: [id])
  Location      VehicleLocation[]
  userId        String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @default(now()) @updatedAt

  @@id([id, userId])
  @@unique([vehicleNumber, gpsDeviceId])
}

model VehicleLocation {
  id               String   @id @unique @default(uuid())
  latitude         Decimal  @db.Decimal(10, 8)
  longitude        Decimal  @db.Decimal(11, 8)
  placeId          String? //Google Place Id for reverse geocoding
  formattedAddress String? // Google formatted address for reverse geocoding
  vehicle          Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId        String
  gpsDeviceId      String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
}
